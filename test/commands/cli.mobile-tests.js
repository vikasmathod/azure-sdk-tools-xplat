//
// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//

/*

  WARNING: whenever you make any of the following changes:
  - product changes affecting wire protocols
  - adding tests
  - removing tests
  - reordering tests
  you must regenerate the cli.mobile-tests.nock.js file that contains
  the mocked HTTP requests and responses corresponding to the tests in this
  file. The instructions are below.

  INSTRUCTIONS FOR RE-GENERATING THE cli.mobile-tests.nock.js FILE:

  1. Make sure the tests are passing against live Windows Azure endpoints:
  1.0. Remember to register your Windows Azure credentials with `azure account import`
  1.1. Set the NOCK_OFF environment variable to `true`
  1.2. Run tests with `npm test`

  2. Re-run the tests against the live Windows Azure endpints while capturing the
     HTTP traffic:
  2.1. Make sure NOCK_OFF is still set to `true`
  2.2. Set AZURE_MOBILE_NOCK_REC to `true`
  2.3. Run the tests with `npm test`. The new cli.mobile-tests.nock.js will be generated.
  2.4. Manually update the `nockedSubscriptionId` and `nockedServiceName` variables right below
     to the values of subscription Id and service name that had been used during the test pass in #2.3.
     The service name should be displayed in the name of every test that executed.

  3. Validate the new mocks:
  3.1. Unset both NOCK_OFF and AZURE_MOBILE_NOCK_REC environment variables
  3.2. Run the tests with `npm test`.

*/

var nockedSubscriptionId = '2c224e7e-3ef5-431d-a57b-e71f4662e3a6';
var nockedServiceName = 'clitestcdb0958b-be88-4d61-84bd-8ef56dfe6d92';

var nockhelper = require('../framework/nock-helper.js');
var nocked = process.env.NOCK_OFF ? null : require('../recordings/cli.mobile-tests.nock.js');
var should = require('should');
var url = require('url');
var uuid = require('node-uuid');
var util = require('util');
var executeCmd = require('../framework/cli-executor').execute;
var fs = require('fs');
var sinon = require('sinon');
var keyFiles = require('../../lib/util/keyFiles');
var profile = require('../../lib/util/profile');
var Channel = require('../../lib/util/channel');
var location = process.env.AZURE_SQL_TEST_LOCATION || 'West US';
var servicedomain = process.env.SERVICE_DOMAIN || '.azure-mobile.net';
var scopeWritten;
var existingDBName;
var existingServerName;
var existingContinuationToken;
var knownRecords;

// polyfill appendFileSync
if (!fs.appendFileSync) {
  fs.appendFileSync = function (file, content) {
    var current = fs.readFileSync(file, 'utf8');
    current += content;
    fs.writeFileSync(file, current);
  };
}

var currentTest = 0;
function setupNock(cmd) {
  if (process.env.NOCK_OFF) {
    return [];
  }
  else if (currentTest < nocked.scopes.length) {
    cmd.push('-s');
    cmd.push(nockedSubscriptionId);

    return nocked.scopes[currentTest++].map(function (createScopeFunc) {
      return createScopeFunc(nockhelper.nock);
    });
  }
  else {
    throw new Error('It appears the cli.mobile-tests.js file has more tests than there are mocked tests in cli.mobile-tests.nock.js. '
      + 'You may need to re-generate the cli.mobile-tests.nock.js using instructions in cli.mobile-test.js.');
  }
}

function checkScopes(scopes) {
  scopes.forEach(function (scope) {
    scope.isDone().should.be.ok;
  });
}

describe('cli', function () {
  describe('mobile', function () {

    // The hardcoded service name may need to be updated every time before a new NOCK recording is made
    var servicename = process.env.NOCK_OFF ? 'clitest' + uuid() : nockedServiceName;
    var existingServiceName = servicename.replace(/clitest/, 'existing');

    function cleanupService(callback) {
      // make best effort to remove the service in case of a test failure
      if (process.env.NOCK_OFF) {
        var cmd = ('node cli.js mobile delete ' + servicename + ' -a -q --json').split(' ');
        executeCmd(cmd, function (result) {
          callback();
        });
      } else {
        callback();
      }
    }

    // once before suite runs
    before(function (done) {
      process.env.AZURE_ENABLE_STRICT_SSL = false;

      if (process.env.AZURE_MOBILE_NOCK_REC) {
        fs.writeFileSync(__dirname + '/../recordings/cli.mobile-tests.nock.js',
          '// This file has been autogenerated.\n' +
          '// Check out cli.mobile-tests.js for re-generation instructions.\n\n' +
          'exports.scopes = [');
      } else if (!process.env.NOCK_OFF) {
        sinon.stub(keyFiles, 'readFromFile', function () {
          return {
            cert: process.env.AZURE_CERTIFICATE,
            key: process.env.AZURE_CERTIFICATE_KEY
          };
        });

        var originalProfileLoad = profile.load;
        sinon.stub(profile, 'load', function(fileNameOrData) {
          if (!fileNameOrData || fileNameOrData === profile.defaultProfileFile) {
            return originalProfileLoad({
              environments: [],
              subscriptions: [
                {
                  id: nockedSubscriptionId,
                  name: 'testAccount',
                  managementCertificate: {
                    cert: process.env.AZURE_CERTIFICATE,
                    key: process.env.AZURE_CERTIFICATE_KEY
                  },
                  environmentName: 'AzureCloud',
                  registeredProviders: ['sqlserver', 'website', 'Mobileservice']
                }
              ]
            });
          }
          return originalProfileLoad(fileNameOrData);
        });

        profile.current = profile.load();
      }

      sinon.stub(keyFiles, 'writeToFile', function () {});

      cleanupService(done);
    });

    // once after suite runs
    after(function (done) {
      delete process.env.AZURE_ENABLE_STRICT_SSL;

      if (process.env.AZURE_MOBILE_NOCK_REC) {
        fs.appendFileSync(__dirname + '/../recordings/cli.mobile-tests.nock.js', '];');
      }

      cleanupService(function () {
        if (keyFiles.readFromFile.restore) {
          keyFiles.readFromFile.restore();
        }

        if (keyFiles.writeToFile.restore) {
          keyFiles.writeToFile.restore();
        }

        if (profile.load.restore) {
          profile.load.restore();
        }

        done();
      });
    });

    // before every test
    beforeEach(function (done) {
      nockhelper.nockHttp();

      if (process.env.AZURE_MOBILE_NOCK_REC) {
        // start nock recoding
        nockhelper.nock.recorder.rec(true);
      }

      done();
    });

    // after every test
    afterEach(function (done) {
      if (process.env.AZURE_MOBILE_NOCK_REC) {
        // play nock recording
        var scope = scopeWritten ? ',\n[' : '[';
        scopeWritten = true;
        var lineWritten;
        nockhelper.nock.recorder.play().forEach(function (line) {
          if (line.indexOf('nock') >= 0) {
            // skip async tracking operations that are other than success to speed things up
            if (line.match(/\/operations\//) && !line.match(/\<Status\>Succeeded\<\/Status\>/)) {
              return;
            }

            // apply fixups of nock generated mocks

            // do not filter on body of app create request, since it contains random GUIDs that would mismatch
            line = line.replace(/(\.post\('\/[^\/]*\/applications')[^\)]+\)/, '.filteringRequestBody(function (path) { return \'*\';})\n$1, \'*\')');
            // do not filter on body of job create request, since it contains random startTime that would mismatch
            line = line.replace(/(\.post\('\/[^\/]*\/services\/mobileservices\/mobileservices\/[^\/]*\/scheduler\/jobs')[^\)]+\)/, '.filteringRequestBody(function (path) { return \'*\';})\n$1, \'*\')');
            // do not filter on body of job update request, since it contains random startTime that would mismatch
            line = line.replace(/(\.put\('\/[^\/]*\/services\/mobileservices\/mobileservices\/[^\/]*\/scheduler\/jobs')[^\)]+\)/, '.filteringRequestBody(function (path) { return \'*\';})\n$1, \'*\')');
            // do not filter on the body of script upload, since line endings differ between Windows and Mac
            line = line.replace(/(\.put\('[^\']*')\, \"[^\"]+\"\)/, '.filteringRequestBody(function (path) { return \'*\';})\n$1, \'*\')');
            // nock encoding bug
            var reg = new RegExp(/^([\S\s]*)\.get\(\'(.*?)\'\)([\S\s]*)$/gim);
            var result = reg.exec(line);
            if (result !== null) {
                line = result[1] + ".get('" + result[2].replace(/'/igm, "\\'") + "')" + result[3];
            }

            line = line.replace("'error'", "\\'error\\'");
            line = line.replace("'information'", "\\'information\\'");
            line = line.replace("'warning'", "\\'warning\\'");
            // nock is loosing the port number
            line = line.replace("nock('https://management.database.windows.net')", "nock('https://management.database.windows.net:8443')");

            scope += (lineWritten ? ',\n' : '') + 'function (nock) { var result = ' + line + ' return result; }';
            lineWritten = true;
          }
        });
        scope += ']';
        fs.appendFileSync(__dirname + '/../recordings/cli.mobile-tests.nock.js', scope);
        nockhelper.nock.recorder.clear();
      }

      nockhelper.unNockHttp();

      done();
    });

    it('locations --json (verify the locations provided by mobile service)', function (done) {
          var cmd = ('node cli.js mobile locations --json').split(' ');
          var scopes = setupNock(cmd);
          executeCmd(cmd, function (result) {
            result.exitStatus.should.equal(0);
            var response = JSON.parse(result.text);
            Array.isArray(response).should.be.ok;
            response.should.includeEql({ 'region': 'East US' });
            response.should.includeEql({ 'region': 'North Europe' });
            checkScopes(scopes);
            done();
          });
        });

    it('create ' + servicename + ' tjanczuk FooBar#12 --sqlLocation "' + location + '" --json (create new service and get its server, DB name)', function (done) {
      var cmd = ('node cli.js mobile create ' + servicename + ' tjanczuk FooBar#12').split(' ');
          cmd.push('--sqlLocation');
          cmd.push(location);
          cmd.push('--json');

      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        var response = JSON.parse(result.text);
        response.should.have.property('Name', servicename + 'mobileservice');
        response.should.have.property('Label', servicename);
        response.should.have.property('State', 'Healthy');
        existingDBName = response.InternalResources.InternalResource[1].Name;
        existingServerName = response.InternalResources.InternalResource[2].Name;
        checkScopes(scopes);
        done();
      });
    });

    it('create ' + existingServiceName + ' -d existingDBName -r existingServerName tjanczuk FooBar#12 --json (create service with existing DB and server)', function (done) {
        var cmd = ('node cli.js mobile create ' + existingServiceName + ' -d ' + existingDBName + ' -r ' + existingServerName + ' tjanczuk FooBar#12').split(' ');
        cmd.push('--json');

        var scopes = setupNock(cmd);
        executeCmd(cmd, function (result) {
            result.exitStatus.should.equal(0);
            var response = JSON.parse(result.text);
            response.should.have.property('Name', existingServiceName + 'mobileservice');
            response.should.have.property('Label', existingServiceName);
            response.should.have.property('State', 'Healthy');
            response.InternalResources.InternalResource.Name.should.equal(existingServiceName);
            Array.isArray(response.ExternalResources.ExternalResource).should.be.ok;
            response.ExternalResources.ExternalResource.length.should.equal(2);
            response.ExternalResources.ExternalResource[0].Name.should.equal(existingDBName);
            response.ExternalResources.ExternalResource[1].Name.should.equal(existingServerName);
            checkScopes(scopes);
            done();
        });
    });

    it('list --json (contains healthy service)', function(done) {
      var cmd = ('node cli.js mobile list --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        var response = JSON.parse(result.text);
        response.some(function (service) {
          return service.name === servicename && service.state === 'Ready';
        }).should.be.ok;
        response.some(function (service) {
            return service.name === existingServiceName && service.state === 'Ready';
        }).should.be.ok;
        checkScopes(scopes);
        done();
      });
    });

    it('restart ' + servicename + ' --json (Restart specific service)', function (done) {
        var cmd = ('node cli.js mobile restart ' + servicename + ' --json').split(' ');
        var scopes = setupNock(cmd);
        executeCmd(cmd, function (result) {
            result.exitStatus.should.equal(0);
            result.text.should.equal('{}\n');
            checkScopes(scopes);
            done();
        });
    });

    it('show ' + servicename + ' --json (contains healthy service)', function(done) {
      var cmd = ('node cli.js mobile show ' + servicename + ' --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        var response = JSON.parse(result.text);
        response.service.name.should.equal(servicename);
        response.service.state.should.equal('Ready');
        response.application.Name.should.equal(servicename + 'mobileservice');
        response.application.Label.should.equal(servicename);
        response.application.State.should.equal('Healthy');
        response.scalesettings.tier.should.equal('tier1');
        response.scalesettings.numberOfInstances.should.equal(1);
        checkScopes(scopes);
        done();
      });
    });

    it('job list --json (contains no scheduled jobs by default)', function(done) {
      var cmd = ('node cli.js mobile job list ' + servicename + ' --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        var response = JSON.parse(result.text);
        response.length.should.equal(0);
        checkScopes(scopes);
        done();
      });
    });

    it('job create ' + servicename + ' foobar --json (create default scheduled job)', function(done) {
      var cmd = ('node cli.js mobile job create ' + servicename + ' foobar --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        result.text.should.equal('');
        checkScopes(scopes);
        done();
      });
    });

    it('job list --json (contains one scheduled job)', function(done) {
      var cmd = ('node cli.js mobile job list ' + servicename + ' --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        var response = JSON.parse(result.text);
        response.length.should.equal(1);
        response[0].name.should.equal('foobar');
        response[0].status.should.equal('disabled');
        response[0].intervalUnit.should.equal('minute');
        response[0].intervalPeriod.should.equal(15);
        checkScopes(scopes);
        done();
      });
    });

    it('job update ' + servicename + ' foobar -u hour -i 2 -a enabled --json (update scheduled job)', function(done) {
      var cmd = ('node cli.js mobile job update ' + servicename + ' foobar -u hour -i 2 -a enabled --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        result.text.should.equal('');
        checkScopes(scopes);
        done();
      });
    });

    it('job list --json (contains updated scheduled job)', function(done) {
      var cmd = ('node cli.js mobile job list ' + servicename + ' --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        var response = JSON.parse(result.text);
        response.length.should.equal(1);
        response[0].name.should.equal('foobar');
        response[0].status.should.equal('enabled');
        response[0].intervalUnit.should.equal('hour');
        response[0].intervalPeriod.should.equal(2);
        checkScopes(scopes);
        done();
      });
    });

    it('job update ' + servicename + ' foobar -u none --json (update scheduled job to be on demand)', function(done) {
      var cmd = ('node cli.js mobile job update ' + servicename + ' foobar -u none --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        result.text.should.equal('');
        checkScopes(scopes);
        done();
      });
    });

    it('job list --json (job updated to be on demand)', function(done) {
      var cmd = ('node cli.js mobile job list ' + servicename + ' --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        var response = JSON.parse(result.text);
        response.length.should.equal(1);
        response[0].name.should.equal('foobar');
        response[0].status.should.equal('disabled');
        checkScopes(scopes);
        done();
      });
    });

    it('job update ' + servicename + ' foobar -u minute -i 20 --json (update on demand job to have schedule)', function(done) {
      var cmd = ('node cli.js mobile job update ' + servicename + ' foobar -u minute -i 20 --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        result.text.should.equal('');
        checkScopes(scopes);
        done();
      });
    });

    it('job list --json (job now a scheduled job)', function(done) {
      var cmd = ('node cli.js mobile job list ' + servicename + ' --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        var response = JSON.parse(result.text);
        response.length.should.equal(1);
        response[0].name.should.equal('foobar');
        response[0].status.should.equal('disabled');
        response[0].intervalUnit.should.equal('minute');
        response[0].intervalPeriod.should.equal(20);
        response[0].startTime.should.equal('1900-01-01T00:00:00Z');
        checkScopes(scopes);
        done();
      });
    });

      // Disable specific scheduler job
    it('job update ' + servicename + ' -a disabled --json', function (done) {
        var cmd = ('node cli.js mobile job update ' + servicename + ' foobar -a disabled --json').split(' ');
        var scopes = setupNock(cmd);
        executeCmd(cmd, function (result) {
            result.exitStatus.should.equal(0);
            result.text.should.equal('');
            checkScopes(scopes);
            done();
        });
    });

    it('job delete ' + servicename + ' foobar --json (delete scheduled job)', function(done) {
      var cmd = ('node cli.js mobile job delete ' + servicename + ' foobar --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        result.text.should.equal('');
        checkScopes(scopes);
        done();
      });
    });

    it('job list --json (contains no scheduled jobs after deletion)', function(done) {
      var cmd = ('node cli.js mobile job list ' + servicename + ' --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        var response = JSON.parse(result.text);
        response.length.should.equal(0);
        checkScopes(scopes);
        done();
      });
    });

    it('config list ' + servicename + ' --json (default config)', function(done) {
      var cmd = ('node cli.js mobile config list ' + servicename + ' --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        var response = JSON.parse(result.text);
        if (response.service && response.service.applicationSystemKey) {
          response.service.applicationSystemKey = '';
        }

        response.should.include({
          "apns": {
            "mode": "none"
          },
          "live": {},
          "service": {
            "dynamicSchemaEnabled": true,
            "previewFeatures": []
          },
          "auth": [],
          "gcm": {}
        });

        checkScopes(scopes);
        done();
      });
    });

    // Facebook settings

    it('config set ' + servicename + ' facebookClientId 123 --json', function(done) {
      var cmd = ('node cli.js mobile config set ' + servicename + ' facebookClientId 123 --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        result.text.should.equal('');
        checkScopes(scopes);
        done();
      });
    });

    it('config get ' + servicename + ' facebookClientId --json (value was set)', function(done) {
      var cmd = ('node cli.js mobile config get ' + servicename + ' facebookClientId --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        var response = JSON.parse(result.text);
        response.facebookClientId.should.equal('123');
        checkScopes(scopes);
        done();
      });
    });

    it('config set ' + servicename + ' facebookClientSecret 456 --json', function(done) {
      var cmd = ('node cli.js mobile config set ' + servicename + ' facebookClientSecret 456 --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        result.text.should.equal('');
        checkScopes(scopes);
        done();
      });
    });

    it('config get ' + servicename + ' facebookClientSecret --json (value was set)', function(done) {
      var cmd = ('node cli.js mobile config get ' + servicename + ' facebookClientSecret --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        var response = JSON.parse(result.text);
        response.facebookClientSecret.should.equal('456');
        checkScopes(scopes);
        done();
      });
    });

    // Apple Push Notification

    it('config get ' + servicename + ' apns --json (by default apns certificate is not set)', function(done) {
      var cmd = ('node cli.js mobile config get ' + servicename + ' apns --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        var response = JSON.parse(result.text);
        response.apns.should.equal('none');
        checkScopes(scopes);
        done();
      });
    });

    it('config set ' + servicename + ' apns dev:foobar:' + __dirname + '/mobile/cert.pfx --json (set apns certificate)', function(done) {
      var cmd = ('node cli.js mobile config set ' + servicename + ' apns').split(' ');
      cmd.push('dev:foobar:' + __dirname + '/mobile/cert.pfx');
      cmd.push('--json');

      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.errorText.should.equal('');
        result.exitStatus.should.equal(0);
        result.text.should.equal('');
        checkScopes(scopes);
        done();
      });
    });

    it('config get ' + servicename + ' apns --json (apns certificate was set)', function(done) {
      var cmd = ('node cli.js mobile config get ' + servicename + ' apns --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.errorText.should.equal('');
        result.exitStatus.should.equal(0);
        var response = JSON.parse(result.text);
        response.apns.should.equal('dev');
        checkScopes(scopes);
        done();
      });
    });

    // Google Cloud Messaging

    it('config set ' + servicename + ' gcm test-0-gcm-key --json', function(done) {
      var cmd = ('node cli.js mobile config set ' + servicename + ' gcm test-0-gcm-key --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.errorText.should.equal('');
        result.exitStatus.should.equal(0);
        result.text.should.equal('');
        checkScopes(scopes);
        done();
      });
    });

    it('config get ' + servicename + ' gcm --json (value was set)', function(done) {
      var cmd = ('node cli.js mobile config get ' + servicename + ' gcm --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.errorText.should.equal('');
        result.exitStatus.should.equal(0);
        var response = JSON.parse(result.text);
        response.gcm.should.equal('test-0-gcm-key');
        checkScopes(scopes);
        done();
      });
    });

    // Google Settings

    it('config set ' + servicename + ' googleClientId 123 --json', function(done) {
      var cmd = ('node cli.js mobile config set ' + servicename + ' googleClientId 123 --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        result.text.should.equal('');
        checkScopes(scopes);
        done();
      });
    });

    it('config get ' + servicename + ' googleClientId --json (value was set)', function(done) {
      var cmd = ('node cli.js mobile config get ' + servicename + ' googleClientId --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        var response = JSON.parse(result.text);
        response.googleClientId.should.equal('123');
        checkScopes(scopes);
        done();
      });
    });

    it('config set ' + servicename + ' googleClientSecret 456 --json', function(done) {
      var cmd = ('node cli.js mobile config set ' + servicename + ' googleClientSecret 456 --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        result.text.should.equal('');
        checkScopes(scopes);
        done();
      });
    });

    it('config get ' + servicename + ' googleClientSecret --json (value was set)', function(done) {
      var cmd = ('node cli.js mobile config get ' + servicename + ' googleClientSecret --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        var response = JSON.parse(result.text);
        response.googleClientSecret.should.equal('456');
        checkScopes(scopes);
        done();
      });
    });

    // Twitter Settings

    it('config set ' + servicename + ' twitterClientId 123 --json', function(done) {
      var cmd = ('node cli.js mobile config set ' + servicename + ' twitterClientId 123 --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        result.text.should.equal('');
        checkScopes(scopes);
        done();
      });
    });

    it('config get ' + servicename + ' twitterClientId --json (value was set)', function(done) {
      var cmd = ('node cli.js mobile config get ' + servicename + ' twitterClientId --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        var response = JSON.parse(result.text);
        response.twitterClientId.should.equal('123');
        checkScopes(scopes);
        done();
      });
    });

    it('config set ' + servicename + ' twitterClientSecret 456 --json', function(done) {
      var cmd = ('node cli.js mobile config set ' + servicename + ' twitterClientSecret 456 --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        result.text.should.equal('');
        checkScopes(scopes);
        done();
      });
    });

    it('config get ' + servicename + ' twitterClientSecret --json (value was set)', function(done) {
      var cmd = ('node cli.js mobile config get ' + servicename + ' twitterClientSecret --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        var response = JSON.parse(result.text);
        response.twitterClientSecret.should.equal('456');
        checkScopes(scopes);
        done();
      });
    });

    // Cross Domain approved list

    it('config set ' + servicename + ' crossDomainWhitelist localhost --json', function(done) {
      var cmd = ('node cli.js mobile config set ' + servicename + ' crossDomainWhitelist localhost --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.errorText.should.equal('');
        result.exitStatus.should.equal(0);
        result.text.should.equal('');
        checkScopes(scopes);
        done();
      });
    });

    it('config get ' + servicename + ' crossDomainWhitelist --json (value was set)', function(done) {
      var cmd = ('node cli.js mobile config get ' + servicename + ' crossDomainWhitelist --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.errorText.should.equal('');
        result.exitStatus.should.equal(0);
        var response = JSON.parse(result.text);
        response.crossDomainWhitelist.length.should.equal(1);
        response.should.include({
          "crossDomainWhitelist": [
            { host: "localhost" }
          ]
        });

        response.crossDomainWhitelist[0].host.should.equal('localhost');
        checkScopes(scopes);
        done();
      });
    });

   it('config set ' + servicename + ' crossDomainWhitelist test.com,127.0.0.1 --json', function(done) {
      var cmd = ('node cli.js mobile config set ' + servicename + ' crossDomainWhitelist test.com,127.0.0.1 --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.errorText.should.equal('');
        result.exitStatus.should.equal(0);
        result.text.should.equal('');
        checkScopes(scopes);
        done();
      });
    });

    it('config get ' + servicename + ' crossDomainWhitelist --json (value was set)', function(done) {
      var cmd = ('node cli.js mobile config get ' + servicename + ' crossDomainWhitelist --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.errorText.should.equal('');
        result.exitStatus.should.equal(0);
        var response = JSON.parse(result.text);
        response.crossDomainWhitelist.length.should.equal(2);
        response.should.include({
          "crossDomainWhitelist": [
            { host: "test.com" },
            { host: "127.0.0.1" }
          ]
        });

        checkScopes(scopes);
        done();
      });
    });

    // Microsoft (Live) Settings

    it('config set ' + servicename + ' microsoftAccountClientId 123 --json', function(done) {
      var cmd = ('node cli.js mobile config set ' + servicename + ' microsoftAccountClientId 123 --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        result.text.should.equal('');
        checkScopes(scopes);
        done();
      });
    });

    it('config get ' + servicename + ' microsoftAccountClientId --json (value was set)', function(done) {
      var cmd = ('node cli.js mobile config get ' + servicename + ' microsoftAccountClientId --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        var response = JSON.parse(result.text);
        response.microsoftAccountClientId.should.equal('123');
        checkScopes(scopes);
        done();
      });
    });

    it('config set ' + servicename + ' microsoftAccountClientSecret 123 --json', function(done) {
      var cmd = ('node cli.js mobile config set ' + servicename + ' microsoftAccountClientSecret 123 --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        result.text.should.equal('');
        checkScopes(scopes);
        done();
      });
    });

    it('config get ' + servicename + ' microsoftAccountClientSecret --json (value was set)', function(done) {
      var cmd = ('node cli.js mobile config get ' + servicename + ' microsoftAccountClientSecret --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        var response = JSON.parse(result.text);
        response.microsoftAccountClientSecret.should.equal('123');
        checkScopes(scopes);
        done();
      });
    });

    it('config set ' + servicename + ' microsoftAccountPackageSID 123 --json', function(done) {
      var cmd = ('node cli.js mobile config set ' + servicename + ' microsoftAccountPackageSID 123 --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        result.text.should.equal('');
        checkScopes(scopes);
        done();
      });
    });

    it('config get ' + servicename + ' microsoftAccountPackageSID --json (value was set)', function(done) {
      var cmd = ('node cli.js mobile config get ' + servicename + ' microsoftAccountPackageSID --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        var response = JSON.parse(result.text);
        response.microsoftAccountPackageSID.should.equal('123');
        checkScopes(scopes);
        done();
      });
    });

    // Setting from file

    it('config set -f ' + __dirname + '/mobile/facebookClientId.txt ' + servicename + ' facebookClientId --json', function(done) {
        var cmd = ('node cli.js mobile config set -f ' + __dirname + '/mobile/facebookClientId.txt ' + servicename + ' facebookClientId --json').split(' ');
        var scopes = setupNock(cmd);
    executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        result.text.should.equal('');
        checkScopes(scopes);
        done();
    });
    });

    it('config get ' + servicename + ' facebookClientId --json (set from file)', function (done) {
        var cmd = ('node cli.js mobile config get ' + servicename + ' facebookClientId --json').split(' ');
        var scopes = setupNock(cmd);
        executeCmd(cmd, function (result) {
            result.exitStatus.should.equal(0);
            var response = JSON.parse(result.text);
            fs.readFileSync(__dirname + '/mobile/facebookClientId.txt', 'utf8', function (err, data) {
                if (err) {
                    return console.log(err);
                }
                response.facebookClientId.should.equal(data);
            });
            checkScopes(scopes);
            done();
        });
    });

    it('appsetting list ' + servicename + '--json (empty)', function(done) {
      var cmd = ('node cli.js mobile appsetting list ' + servicename + ' --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        var response = JSON.parse(result.text);
        Array.isArray(response).should.be.ok;
        response.length.should.equal(0);
        checkScopes(scopes);
        done();
      });
    });

    it('appsetting add ' + servicename + '  testsetting alpha1 --json', function(done) {
      var cmd = ('node cli.js mobile appsetting add ' + servicename + ' testsetting alpha1 --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        result.text.should.equal('');
        checkScopes(scopes);
        done();
      });
    });

    it('appsetting show ' + servicename + '  testsetting --json', function(done) {
      var cmd = ('node cli.js mobile appsetting show ' + servicename + ' testsetting --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        var response = JSON.parse(result.text);
        response.name.should.equal('testsetting');
        response.value.should.equal('alpha1');
        checkScopes(scopes);
        done();
      });
    });

    it('appsetting list ' + servicename + '--json (empty)', function(done) {
      var cmd = ('node cli.js mobile appsetting list ' + servicename + ' --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        var response = JSON.parse(result.text);
        Array.isArray(response).should.be.ok;
        response.length.should.equal(1);
        checkScopes(scopes);
        done();
      });
    });

    it('appsetting delete ' + servicename + '  testsetting alpha1 --json', function(done) {
      var cmd = ('node cli.js mobile appsetting delete ' + servicename + ' testsetting --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        result.text.should.equal('');
        checkScopes(scopes);
        done();
      });
    });

    it('appsetting list ' + servicename + '--json (empty)', function(done) {
      var cmd = ('node cli.js mobile appsetting list ' + servicename + ' --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        var response = JSON.parse(result.text);
        Array.isArray(response).should.be.ok;
        response.length.should.equal(0);
        checkScopes(scopes);
        done();
      });
    });

    // Table commands

    it('table list ' + servicename + ' --json (no tables by default)', function(done) {
      var cmd = ('node cli.js mobile table list ' + servicename + ' --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        var response = JSON.parse(result.text);
        Array.isArray(response).should.be.ok;
        response.length.should.equal(0);
        checkScopes(scopes);
        done();
      });
    });

    it('table create ' + servicename + ' table1 --json (add first table)', function(done) {
      var cmd = ('node cli.js mobile table create ' + servicename + ' table1 --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        result.text.should.equal('');
        checkScopes(scopes);
        done();
      });
    });

    it('table list ' + servicename + ' --json (contains one table)', function(done) {
      var cmd = ('node cli.js mobile table list ' + servicename + ' --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        var response = JSON.parse(result.text);
        Array.isArray(response).should.be.ok;
        response.length.should.equal(1);
        response[0].name.should.equal('table1');
        checkScopes(scopes);
        done();
      });
    });

    it('table show ' + servicename + ' table1 --json (default table config)', function(done) {
      var cmd = ('node cli.js mobile table show ' + servicename + ' table1 --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        var response = JSON.parse(result.text);
        ['insert', 'read', 'update', 'delete'].forEach(function (permission) {
          response.permissions[permission].should.equal('application');
        });
        response.table.name.should.equal('table1');
        Array.isArray(response.columns).should.be.ok;
        response.columns.length.should.equal(4);
        response.columns[0].name.should.equal('id');
        response.columns[0].type.should.equal('string');
        checkScopes(scopes);
        done();
      });
    });

    it('table update ' + servicename + ' table1 -p *=admin,insert=public --json (update permissions)', function(done) {
      var cmd = ('node cli.js mobile table update ' + servicename + ' table1 -p *=admin,insert=public --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        result.text.should.equal('');
        checkScopes(scopes);
        done();
      });
    });

    it('table show ' + servicename + ' table1 --json (updated permissions)', function(done) {
      var cmd = ('node cli.js mobile table show ' + servicename + ' table1 --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        var response = JSON.parse(result.text);
        ['read', 'update', 'delete'].forEach(function (permission) {
          response.permissions[permission].should.equal('admin');
        });
        response.permissions.insert.should.equal('public');
        response.table.name.should.equal('table1');
        Array.isArray(response.columns).should.be.ok;
        response.columns.length.should.equal(4);
        response.columns[0].name.should.equal('id');
        checkScopes(scopes);
        done();
      });
    });

    it('table create ' + servicename + ' table2 --json (add table with specific permission)', function (done) {
        var cmd = ('node cli.js mobile table create -p insert=public,update=public,read=user,delete=admin ' + servicename + ' table2 --json').split(' ');
        var scopes = setupNock(cmd);
        executeCmd(cmd, function (result) {
            result.exitStatus.should.equal(0);
            result.text.should.equal('');
            checkScopes(scopes);
            done();
        });
    });

    it('table show ' + servicename + ' table2 --json (check the specific permission setting)', function (done) {
        var cmd = ('node cli.js mobile table show ' + servicename + ' table2 --json').split(' ');
        var scopes = setupNock(cmd);
        executeCmd(cmd, function (result) {
            result.exitStatus.should.equal(0);
            var response = JSON.parse(result.text);
            ['insert', 'update'].forEach(function (permission) {
                response.permissions[permission].should.equal('public');
            });
            response.permissions.read.should.equal('user');
            response.permissions.delete.should.equal('admin');
            response.table.name.should.equal('table2');
            checkScopes(scopes);
            done();
        });
    });

    it('table delete ' + servicename + ' table2 -q --json (delete table2)', function (done) {
        var cmd = ('node cli.js mobile table delete ' + servicename + ' table2 -q --json').split(' ');
        var scopes = setupNock(cmd);
        executeCmd(cmd, function (result) {
            result.text.should.equal('');
            result.exitStatus.should.equal(0);
            checkScopes(scopes);
            done();
        });
    });

    function insert5Rows(callback) {
      var success = 0;
      var failure = 0;

      function tryFinish (error, content, response) {
        if(error) {
          failure++;
        } else {
          response.statusCode >= 400 ? failure++ : success++;
        }

        if ((success + failure) < 5) {
          return;
        }

        callback(success, failure);
      }

      for (var i = 0; i < 5; i++) {
        var channel = new Channel({
          host: servicename + servicedomain,
          port: 443
        }).path('tables')
          .path('table1')
          .header('Content-Type', 'application/json');

        channel.POST(JSON.stringify({ rowNumber: i, foo: 'foo', bar: 7, baz: true }), tryFinish);
      }
    };

    it('(add 5 rows of data to table with public insert permission)', function(done) {
      var scopes = setupNock([]);
      insert5Rows(function (success, failure) {
        failure.should.equal(0);
        checkScopes(scopes);
        done();
      });
    });

    it('table show ' + servicename + ' table1 --json (new rows and columns)', function(done) {
      var cmd = ('node cli.js mobile table show ' + servicename + ' table1 --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        var response = JSON.parse(result.text);
        Array.isArray(response.columns).should.be.ok;
        response.columns.length.should.equal(8);
        [ { name: 'id', indexed: true },
          { name: '__createdAt', indexed: true },
          { name: '__updatedAt', indexed: false },
          { name: '__version', indexed: false },
          { name: 'rowNumber', indexed: false },
          { name: 'foo', indexed: false },
          { name: 'bar', indexed: false },
          { name: 'baz', indexed: false } ].forEach(function (column, columnIndex) {
            response.columns[columnIndex].name.should.equal(column.name);
            response.columns[columnIndex].indexed.should.equal(column.indexed);
          });
        checkScopes(scopes);
        done();
      });
    });

    it('data read ' + servicename + ' table1 --json (show 5 rows of data)', function(done) {
      var cmd = ('node cli.js mobile data read ' + servicename + ' table1 --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        knownRecords = JSON.parse(result.text);
        Array.isArray(knownRecords).should.be.ok;
        knownRecords.length.should.equal(5);
        checkScopes(scopes);
        done();
      });
    });

    it('data read ' + servicename + ' table1 --top 1 --json (show top 1 row of data)', function(done) {
      var cmd = ('node cli.js mobile data read ' + servicename + ' table1 --top 1 --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        var response = JSON.parse(result.text);
        Array.isArray(response).should.be.ok;
        response.length.should.equal(1);
        response[0].id.should.equal(knownRecords[0].id);
        checkScopes(scopes);
        done();
      });
    });

    it('data read ' + servicename + ' table1 --skip 3 --json', function (done) {
        var cmd = ('node clis.js mobile data read ' + servicename + ' table1 --skip 3 --json').split(' ');
        var scopes = setupNock(cmd);
        executeCmd(cmd, function (result) {
            result.exitStatus.should.equal(0);
            var response = JSON.parse(result.text);
            Array.isArray(response).should.be.ok;
            response.length.should.equal(2);
            response[0].id.should.equal(knownRecords[3].id);
            response[1].id.should.equal(knownRecords[4].id);
            checkScopes(scopes);
            done();
        })
    });

    it('data read ' + servicename + ' table1 --skip 2 --top 2 --json (skip top 2 row of data to show following 2 records)', function (done) {
        var cmd = ('node cli.js mobile data read ' + servicename + ' table1 --skip 2 --top 2 --json').split(' ');
        var scopes = setupNock(cmd);
        executeCmd(cmd, function (result) {
            result.exitStatus.should.equal(0);
            var response = JSON.parse(result.text);
            Array.isArray(response).should.be.ok;
            response.length.should.equal(2);
            response[0].id.should.equal(knownRecords[2].id);
            response[1].id.should.equal(knownRecords[3].id);
            checkScopes(scopes);
            done();
        });
    });

    it('data read ' + servicename + ' table1 $top=2 --json', function (done) {
        var cmd = ('node clis.js mobile data read ' + servicename + ' table1 $top=2 --json').split(' ');
        var scopes = setupNock(cmd);
        executeCmd(cmd, function (result) {
            result.exitStatus.should.equal(0);
            var response = JSON.parse(result.text);
            Array.isArray(response).should.be.ok;
            response.length.should.equal(2);
            response[0].id.should.equal(knownRecords[0].id);
            response[1].id.should.equal(knownRecords[1].id);
            checkScopes(scopes);
            done();
        })
    });

    it('table update ' + servicename + ' table1 --deleteColumn foo --addIndex bar,baz -q --json (delete column, add indexes)', function(done) {
      var cmd = ('node cli.js mobile table update ' + servicename + ' table1  --deleteColumn foo --addIndex bar,baz -q --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        result.text.should.equal('');
        checkScopes(scopes);
        done();
      });
    });

    it('table show ' + servicename + ' table1 --json (fewer columns, more indexes)', function(done) {
      var cmd = ('node cli.js mobile table show ' + servicename + ' table1 --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        var response = JSON.parse(result.text);
        Array.isArray(response.columns).should.be.ok;
        response.columns.length.should.equal(7);
        [ { name: 'id', indexed: true },
          { name: '__createdAt', indexed: true },
          { name: '__updatedAt', indexed: false },
          { name: '__version', indexed: false },
          { name: 'rowNumber', indexed: false },
          { name: 'bar', indexed: true },
          { name: 'baz', indexed: true } ].forEach(function (column, columnIndex) {
            response.columns[columnIndex].name.should.equal(column.name);
            response.columns[columnIndex].indexed.should.equal(column.indexed);
          });
        checkScopes(scopes);
        done();
      });
    });

    it('table update ' + servicename + ' table1 --deleteIndex bar --addColumn custom=string -q --json (delete index)', function (done) {
        var cmd = ('node cli.js mobile table update ' + servicename + ' table1 --deleteIndex bar --addColumn custom=string -q --json').split(' ');
        var scopes = setupNock(cmd);
        executeCmd(cmd, function (result) {
            result.exitStatus.should.equal(0);
            result.text.should.equal('');
            checkScopes(scopes);
            done();
        });
    });

    it('table show ' + servicename + ' table1 --json (remove index on specific column)', function (done) {
        var cmd = ('node cli.js mobile table show ' + servicename + ' table1 --json').split(' ');
        var scopes = setupNock(cmd);
        executeCmd(cmd, function (result) {
            result.exitStatus.should.equal(0);
            var response = JSON.parse(result.text);
            Array.isArray(response.columns).should.be.ok;
            response.columns.length.should.equal(8);
            [{ name: 'id', indexed: true },
              { name: '__createdAt', indexed: true },
              { name: '__updatedAt', indexed: false },
              { name: '__version', indexed: false },
              { name: 'rowNumber', indexed: false },
              { name: 'bar', indexed: false },
              { name: 'baz', indexed: true },
              { name: 'custom', indexed: false }].forEach(function (column, columnIndex) {
                  response.columns[columnIndex].name.should.equal(column.name);
                  response.columns[columnIndex].indexed.should.equal(column.indexed);
              });
            checkScopes(scopes);
            done();
        });
    });

    it('data delete ' + servicename + ' table1 <recordid> -q --json (delete a record)', function(done) {
      var cmd = ('node cli.js mobile data delete ' + servicename + ' table1 ' + knownRecords[0].id + ' -q --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        checkScopes(scopes);
        done();
      });
    });

    it('data read ' + servicename + ' table1 --json (show 4 rows of data)', function(done) {
      var cmd = ('node cli.js mobile data read ' + servicename + ' table1 --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        knownRecords = JSON.parse(result.text);
        Array.isArray(knownRecords).should.be.ok;
        knownRecords.length.should.equal(4);
        checkScopes(scopes);
        done();
      });
    });

    it('data truncate ' + servicename + ' table1 -q --json (delete all data from table)', function(done) {
      var cmd = ('node cli.js mobile data truncate ' + servicename + ' table1 -q --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        var response = JSON.parse(result.text);
        response.didTruncate.should.equal(true);
        response.rowCount.should.equal(4);
        checkScopes(scopes);
        done();
      });
    });

    // Verify we can create old style tables

    it('table create ' + servicename + ' table3 --integerId --json', function(done) {
      var cmd = ('node cli.js mobile table create ' + servicename + ' table3 --integerId --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        result.text.should.equal('');
        checkScopes(scopes);
        done();
      });
    });

    it('table show ' + servicename + ' table3 --json (fewer columns, more indexes)', function(done) {
      var cmd = ('node cli.js mobile table show ' + servicename + ' table3 --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        var response = JSON.parse(result.text);
        Array.isArray(response.columns).should.be.ok;
        response.columns[0].name.should.equal('id');
        response.columns[0].indexed.should.equal(true);
        response.columns[0].type.should.equal('bigint (MSSQL)');
        checkScopes(scopes);
        done();
      });
    });

    it('table delete ' + servicename + ' table3 -q --json (delete table3)', function (done) {
        var cmd = ('node cli.js mobile table delete ' + servicename + ' table3 -q --json').split(' ');
        var scopes = setupNock(cmd);
        executeCmd(cmd, function (result) {
            result.text.should.equal('');
            result.exitStatus.should.equal(0);
            checkScopes(scopes);
            done();
        });
    });

    /* Custom Api */

    it('api list ' + servicename + ' --json (no apis by default)', function (done) {
      var cmd = ('node cli.js mobile api list ' + servicename + ' --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        var response = JSON.parse(result.text);
        response.length.should.equal(0);
        checkScopes(scopes);
        done();
      });
    });

    it('api create ' + servicename + ' testapi --json (create first api)', function (done) {
      var cmd = ('node cli.js mobile api create ' + servicename + ' testapi --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        result.text.should.equal('');
        checkScopes(scopes);
        done();
      });
    });

    it('api create ' + servicename + ' testapitwo --permissions get=public,post=application,put=user,patch=admin,delete=admin --json', function (done) {
      var cmd = ('node cli.js mobile api create ' + servicename + ' testapitwo --permissions get=public,post=application,put=user,patch=admin,delete=admin --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        result.text.should.equal('');
        checkScopes(scopes);
        done();
      });
    });

    // Confirm apis were created
    it('api list ' + servicename + ' --json', function (done) {
      var cmd = ('node cli.js mobile api list ' + servicename + ' --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        var response = JSON.parse(result.text);

        response.should.includeEql({
          name: 'testapi',
          get: 'application',
          put: 'application',
          post: 'application',
          patch: 'application',
          delete: 'application'
        });
        response.should.includeEql({
          name: 'testapitwo',
          get: 'public',
          put: 'user',
          post: 'application',
          patch: 'admin',
          delete: 'admin'
        });
        checkScopes(scopes);
        done();
      });
    });

    it('api update ' + servicename + ' testapi --json', function (done) {
      var cmd = ('node cli.js mobile api update ' + servicename + ' testapi --permissions get=public,post=application,put=user,patch=admin,delete=admin --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        result.text.should.equal('');
        checkScopes(scopes);
        done();
      });
    });

    it('api delete ' + servicename + ' testapitwo --json', function (done) {
      var cmd = ('node cli.js mobile api delete ' + servicename + ' testapitwo --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        result.text.should.equal('');
        checkScopes(scopes);
        done();
      });
    });

    // Confirm permissions were updated and second api deleted
    it('api list ' + servicename + ' --json', function (done) {
      var cmd = ('node cli.js mobile api list ' + servicename + ' --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        var response = JSON.parse(result.text);
        response.should.includeEql({
          name: 'testapi',
          get: 'public',
          put: 'user',
          post: 'application',
          patch: 'admin',
          delete: 'admin'
        });
        checkScopes(scopes);
        done();
      });
    });

    it('script upload ' + servicename + ' api/testapi.js -f ' + __dirname + '/mobile/testapi.js --json (upload new script)', function(done) {
      var cmd = ('node cli.js mobile script upload ' + servicename + ' api/testapi.js -f').split(' ');
      cmd.push(__dirname + '/mobile/testapi.js');
      cmd.push('--json');

      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.errorText.should.equal('');
        result.exitStatus.should.equal(0);
        result.text.should.equal('');
        checkScopes(scopes);

        done();
      });
    });

    it('script download ' + servicename + ' api/testapi.js -o -f ' + __dirname + '/mobile/testapicopy.js --json (download script)', function(done) {
      var cmd = ('node cli.js mobile script download ' + servicename + ' api/testapi.js -o -f').split(' ');
      cmd.push(__dirname + '/mobile/testapicopy.js');
      cmd.push('--json');

      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        try { fs.unlinkSync(__dirname + '/mobile/testapicopy.js'); } catch (e) {}

        result.errorText.should.equal('');
        result.exitStatus.should.equal(0);
        result.text.should.equal('');
        checkScopes(scopes);

        done();
      });
    });

    it('api delete ' + servicename + ' testapi --json', function (done) {
      var cmd = ('node cli.js mobile api delete ' + servicename + ' testapi --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        result.text.should.equal('');
        checkScopes(scopes);
        done();
      });
    });

    // Confirm no api's exist after delete
    it('api list ' + servicename + ' --json', function (done) {
      var cmd = ('node cli.js mobile api list ' + servicename + ' --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        var response = JSON.parse(result.text);
        response.length.should.equal(0);
        checkScopes(scopes);
        done();
      });
    });

    /* script commands */

    it('script list ' + servicename + ' --json (no scripts by default)', function(done) {
      var cmd = ('node cli.js mobile script list ' + servicename + ' --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        var response = JSON.parse(result.text);
        response.should.include({
          "table": []
        });
        checkScopes(scopes);
        done();
      });
    });

    it('script upload ' + servicename + ' table/table1.insert -f ' + __dirname + '/mobile/table1.insert.js --json (upload one script)', function(done) {
      var cmd = ('node cli.js mobile script upload ' + servicename + ' table/table1.insert -f').split(' ');
      cmd.push(__dirname + '/mobile/table1.insert.js');
      cmd.push('--json');

      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.errorText.should.equal('');
        result.exitStatus.should.equal(0);
        result.text.should.equal('');
        checkScopes(scopes);
        done();
      });
    });

    it('script upload ' + servicename + ' table/table1.read -f ' + __dirname + '/mobile/table1.read.js --json (upload one script)', function (done) {
        var cmd = ('node cli.js mobile script upload ' + servicename + ' table/table1.read -f').split(' ');
        cmd.push(__dirname + '/mobile/table1.read.js');
        cmd.push('--json');

        var scopes = setupNock(cmd);
        executeCmd(cmd, function (result) {
            result.errorText.should.equal('');
            result.exitStatus.should.equal(0);
            result.text.should.equal('');
            checkScopes(scopes);
            done();
        });
    });

    it('script upload ' + servicename + ' table/table1.update -f ' + __dirname + '/mobile/table1.update.js --json (upload one script)', function (done) {
        var cmd = ('node cli.js mobile script upload ' + servicename + ' table/table1.update -f').split(' ');
        cmd.push(__dirname + '/mobile/table1.update.js');
        cmd.push('--json');

        var scopes = setupNock(cmd);
        executeCmd(cmd, function (result) {
            result.errorText.should.equal('');
            result.exitStatus.should.equal(0);
            result.text.should.equal('');
            checkScopes(scopes);
            done();
        });
    });

    it('script upload ' + servicename + ' table/table1.delete -f ' + __dirname + '/mobile/table1.delete.js --json (upload one script)', function (done) {
        var cmd = ('node cli.js mobile script upload ' + servicename + ' table/table1.delete -f').split(' ');
        cmd.push(__dirname + '/mobile/table1.delete.js');
        cmd.push('--json');

        var scopes = setupNock(cmd);
        executeCmd(cmd, function (result) {
            result.errorText.should.equal('');
            result.exitStatus.should.equal(0);
            result.text.should.equal('');
            checkScopes(scopes);
            done();
        });
    });

    it('script list ' + servicename + ' --json (insert&read&upload&delete scripts uploaded)', function(done) {
      var cmd = ('node cli.js mobile script list ' + servicename + ' --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        var response = JSON.parse(result.text);
        Array.isArray(response.table).should.be.ok;
        response.table.length.should.equal(4);
        response.table.forEach(function (item) {
            switch (item.operation) {
                case 'insert':
                    {
                        item.table.should.equal('table1');
                        item.selflink.should.include(servicename + '/tables/table1/scripts/Insert');
                        item.should.have.property('sizeBytes');
                    }
                    break;
                case 'update':
                    {
                        item.table.should.equal('table1');
                        item.selflink.should.include(servicename + '/tables/table1/scripts/Update');
                        item.should.have.property('sizeBytes');
                    }
                    break;
                case 'delete':
                    {
                        item.table.should.equal('table1');
                        item.selflink.should.include(servicename + '/tables/table1/scripts/Delete');
                        item.should.have.property('sizeBytes');
                    }
                    break;
                case 'read':
                    {
                        item.table.should.equal('table1');
                        item.selflink.should.include(servicename + '/tables/table1/scripts/Read');
                        item.should.have.property('sizeBytes');
                    }
                    break;
                default:
                    {
                        false.should.not.be.false;
                    }
                    break;
            }
        });
        checkScopes(scopes);
        done();
      });
    });

    it('script delete ' + servicename + '/mobile/table1.read.js --json (delete read script)', function (done) {
        var cmd = ('node cli.js mobile script delete ' + servicename + ' table/table1.read --json').split(' ');

        var scopes = setupNock(cmd);
        executeCmd(cmd, function (result) {
            result.errorText.should.equal('');
            result.exitStatus.should.equal(0);
            result.text.should.equal('');
            checkScopes(scopes);
            done();
        });
    });

    it('script upload ' + servicename + ' shared/apnsFeedback -f ' + __dirname + '/mobile/feedback_upload.js --json (upload APNS script)', function (done) {
        var cmd = ('node cli.js mobile script upload ' + servicename + ' shared/apnsFeedback -f').split(' ');
        cmd.push(__dirname + '/mobile/feedback_upload.js');
        cmd.push('--json');

        var scopes = setupNock(cmd);
        executeCmd(cmd, function (result) {
            result.errorText.should.equal('');
            result.exitStatus.should.equal(0);
            result.text.should.equal('');
            checkScopes(scopes);
            done();
        });
    });

    it('script download ' + servicename + ' shared/apnsFeedback -f -o ' + __dirname + '/mobile/feedback_download.js --json (download APNS script)', function (done) {
        var cmd = ('node cli.js mobile script download ' + servicename + ' shared/apnsFeedback -o -f').split(' ');
        cmd.push(__dirname + '/mobile/feedback_download.js');
        cmd.push('--json');

        var scopes = setupNock(cmd);
        executeCmd(cmd, function (result) {
            result.exitStatus.should.equal(0);
            result.errorText.should.equal('');
            result.text.should.equal('');
            var data_str = null;
            fs.readFileSync(__dirname + '/mobile/feedback_download.js', 'utf8', function (err, data) {
                if (err) {
                    return console.log(err);
                }
                data_str = data;
            });
            fs.readFileSync(__dirname + '/mobile/feedback_upload.js', 'utf8', function (err, data) {
                if (err) {
                    return console.log(err);
                }
                data.should.equal(data_str);
            });

            try { fs.unlinkSync(__dirname + '/mobile/feedback_download.js'); } catch (e) {}
            checkScopes(scopes);
            done();
        });
    });

    it('script list ' + servicename + ' --json (with APNS script but without read script)', function (done) {
        var cmd = ('node cli.js mobile script list ' + servicename + ' --json').split(' ');
        var scopes = setupNock(cmd);

        executeCmd(cmd, function (result) {
            result.exitStatus.should.equal(0);
            var response = JSON.parse(result.text);
            Array.isArray(response.shared).should.be.ok;
            response.shared.length.should.equal(1);
            response.shared[0].name.should.equal('apnsfeedback.js');

            Array.isArray(response.table).should.be.ok;
            response.table.length.should.equal(3);
            response.table.forEach(function (item) {
                item.operation.should.not.equal('read');
            });
            checkScopes(scopes);
            done();
        });
    });

    it('log ' + servicename + ' --json (no logs by default)', function(done) {
      var cmd = ('node cli.js mobile log ' + servicename + ' --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        var response = JSON.parse(result.text);
        response.should.include({
          "results": []
        });
        checkScopes(scopes);
        done();
      });
    });

    it('(add 5 more rows of data to invoke scripts)', function(done) {
      var scopes = setupNock([]);
      insert5Rows(function (success, failure) {
        failure.should.equal(0);
        checkScopes(scopes);
        done();
      });
    });

    it('log ' + servicename + ' --json (15 log entries added)', function(done) {
      var cmd = ('node cli.js mobile log ' + servicename + ' --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        var response = JSON.parse(result.text);
        Array.isArray(response.results).should.be.ok;
        response.results.length.should.equal(10);
        checkScopes(scopes);
        done();
      });
    });

    it('log ' + servicename + ' --type information --json (10 information log entries added)', function (done) {
        var cmd = ('node cli.js mobile log ' + servicename + ' --type information --json').split(' ');
        var scopes = setupNock(cmd);
        executeCmd(cmd, function (result) {
            result.exitStatus.should.equal(0);
            var response = JSON.parse(result.text);
            Array.isArray(response.results).should.be.ok;
            response.results.length.should.equal(10);
            checkScopes(scopes);
            done();
        });
    });

    it('log ' + servicename + ' --type warning --json (no warning log entry)', function (done) {
        var cmd = ('node cli.js mobile log ' + servicename + ' --type warning --json').split(' ');
        var scopes = setupNock(cmd);
        executeCmd(cmd, function (result) {
            result.exitStatus.should.equal(0);
            var response = JSON.parse(result.text);
            Array.isArray(response.results).should.be.ok;
            response.results.length.should.equal(0);
            checkScopes(scopes);
            done();
        });
    });

    it('log ' + servicename + ' --type error --json (5 error log entries added)', function(done) {
      var cmd = ('node cli.js mobile log ' + servicename + ' --type error --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        var response = JSON.parse(result.text);
        Array.isArray(response.results).should.be.ok;
        response.results.length.should.equal(5);
        checkScopes(scopes);
        done();
      });
    });

    it('log ' + servicename + ' --top 3 --json (list 3 top log entries)', function(done) {
      var cmd = ('node cli.js mobile log ' + servicename + ' --top 3 --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        var response = JSON.parse(result.text);
        Array.isArray(response.results).should.be.ok;
        response.results.length.should.equal(3);
        checkScopes(scopes);
        done();
      });
    });

    it('log ' + servicename + ' -r $top=1 --json (list 1 top log entry)', function (done) {
        var cmd = ('node cli.js mobile log ' + servicename + ' -r $top=1 --json').split(' ');
        var scopes = setupNock(cmd);
        executeCmd(cmd, function (result) {
            result.exitStatus.should.equal(0);
            var response = JSON.parse(result.text);
            Array.isArray(response.results).should.be.ok;
            response.results.length.should.equal(1);
            checkScopes(scopes);
            done();
        });
    });

    it('log ' + servicename + ' -r $top=1&$skip=1 --json (list 1 top log entry after skip 1)', function (done) {
        var cmd = ('node cli.js mobile log ' + servicename + ' -r $top=1&$skip=1 --json').split(' ');
        var scopes = setupNock(cmd);
        executeCmd(cmd, function (result) {
            result.exitStatus.should.equal(0);
            var response = JSON.parse(result.text);
            Array.isArray(response.results).should.be.ok;
            response.results.length.should.equal(1);
            checkScopes(scopes);
            done();
        });
    });

    it('log ' + servicename + ' --source /table/table1.insert.js --json (get logs from specific source)', function (done) {
        var cmd = ('node cli.js mobile log ' + servicename + ' --source /table/table1.insert.js --json').split(' ');
        var scopes = setupNock(cmd);
        executeCmd(cmd, function (result) {
            result.exitStatus.should.equal(0);
            var response = JSON.parse(result.text);
            Array.isArray(response.results).should.be.ok;
            response.results.length.should.equal(10);
            response.results.forEach(function (item) {
                item.timeCreated.should.not.be.empty;
                item.type.should.not.be.empty;
                item.source.should.not.be.empty;
                item.message.should.not.be.empty;
            });
            response.continuationToken.should.not.be.empty;
            existingContinuationToken = response.continuationToken;
            checkScopes(scopes);
            done();
        });
    });

    it('log ' + servicename + ' -c existingContinuationToken --json (get logs by Continuation Token)', function (done) {
        var cmd = ('node cli.js mobile log ' + servicename + ' -c ' + existingContinuationToken + ' --json').split(' ');
        var scopes = setupNock(cmd);
        executeCmd(cmd, function (result) {
            result.exitStatus.should.equal(0);
            var response = JSON.parse(result.text);
            Array.isArray(response.results).should.be.ok;
            response.results.length.should.equal(6);
            response.results.forEach(function (item) {
                item.timeCreated.should.not.be.empty;
                item.type.should.not.be.empty;
                item.source.should.not.be.empty;
                item.message.should.not.be.empty;
            });
            checkScopes(scopes);
            done();
        });
    });

    it('table delete ' + servicename + ' table1 -q --json (delete existing table)', function(done) {
      var cmd = ('node cli.js mobile table delete ' + servicename + ' table1 -q --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.text.should.equal('');
        result.exitStatus.should.equal(0);
        checkScopes(scopes);
        done();
      });
    });

    it('table list ' + servicename + ' --json (no tables after table deletion)', function(done) {
      var cmd = ('node cli.js mobile table list ' + servicename + ' --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        var response = JSON.parse(result.text);
        Array.isArray(response).should.be.ok;
        response.length.should.equal(0);
        checkScopes(scopes);
        done();
      });
    });

    it('table delete ' + servicename + ' table1 -q --json (delete nonexisting table)', function(done) {
      var cmd = ('node cli.js mobile table delete ' + servicename + ' table1 -q --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(1);
        result.errorText.should.include('The table \'table1\' was not found');
        checkScopes(scopes);
        done();
      });
    });

    // Key Command Tests
    // Test setting and randomly generating the application key
    it('key set ' + servicename + ' application LengthOfThirtyLettersAndNumber02 --json', function (done) {
      var cmd = ('node cli.js mobile key set ' + servicename + ' application LengthOfThirtyLettersAndNumber02 --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        var response = JSON.parse(result.text);
        response.applicationKey.should.equal('LengthOfThirtyLettersAndNumber02');
        checkScopes(scopes);
        done();
      });
    });

    it('key regenerate ' + servicename + ' application --json', function (done) {
      var cmd = ('node cli.js mobile key regenerate ' + servicename + ' application --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        var response = JSON.parse(result.text);
        response.applicationKey.length.should.equal(32);
        response.applicationKey.should.not.equal('LengthOfThirtyLettersAndNumber02');
        checkScopes(scopes);
        done();
      });
    });

    // Repeat test for master key
    it('key set ' + servicename + ' master LengthOfThirtyLettersAndNumber02 --json', function (done) {
      var cmd = ('node cli.js mobile key set ' + servicename + ' master LengthOfThirtyLettersAndNumber02 --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        var response = JSON.parse(result.text);
        response.masterKey.should.equal('LengthOfThirtyLettersAndNumber02');
        checkScopes(scopes);
        done();
      });
    });

    it('key regenerate ' + servicename + ' master --json', function (done) {
      var cmd = ('node cli.js mobile key regenerate ' + servicename + ' master --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        var response = JSON.parse(result.text);
        response.masterKey.length.should.equal(32);
        response.masterKey.should.not.equal('LengthOfThirtyLettersAndNumber02');
        checkScopes(scopes);
        done();
      });
    });

    // Scale Tests

    it('scale show ' + servicename + ' --json (show default scale settings)', function(done) {
      var cmd = ('node cli.js mobile scale show ' + servicename + ' --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        var response = JSON.parse(result.text);
        response.tier.should.equal('tier1');
        response.numberOfInstances.should.equal(1);
        checkScopes(scopes);
        done();
      });
    });

    it('scale change ' + servicename + ' -t basic -i 2 --json (rescale to 2 basic instances)', function(done) {
      var cmd = ('node cli.js mobile scale change ' + servicename + ' -t basic -i 2 --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        result.text.should.equal('');
        checkScopes(scopes);
        done();
      });
    });

    it('scale show ' + servicename + ' --json (show updated scale settings)', function(done) {
      var cmd = ('node cli.js mobile scale show ' + servicename + ' --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        var response = JSON.parse(result.text);
        response.tier.should.equal('tier2');
        response.numberOfInstances.should.equal(2);
        checkScopes(scopes);
        done();
      });
    });

    it('scale change ' + servicename + ' -t standard --json -q (change scale to standard)', function (done) {
        var cmd = ('node cli.js mobile scale change ' + servicename + ' -t standard --json -q').split(' ');
        var scopes = setupNock(cmd);
        executeCmd(cmd, function (result) {
            result.exitStatus.should.equal(0);
            result.text.should.equal('');
            checkScopes(scopes);
            done();
        });
    });

    it('scale show ' + servicename + ' --json (show updated scale settings - premium)', function (done) {
        var cmd = ('node cli.js mobile scale show ' + servicename + ' --json').split(' ');
        var scopes = setupNock(cmd);
        executeCmd(cmd, function (result) {
            result.exitStatus.should.equal(0);
            var response = JSON.parse(result.text);
            response.tier.should.equal('tier3');
            response.numberOfInstances.should.equal(2);
            checkScopes(scopes);
            done();
        });
    });

    it('scale change ' + servicename + ' -t free -i 1 --json (rescale back to default)', function(done) {
      var cmd = ('node cli.js mobile scale change ' + servicename + ' -t free -i 1 --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        result.text.should.equal('');
        checkScopes(scopes);
        done();
      });
    });

    it('scale show ' + servicename + ' --json (show updated scale settings - free)', function (done) {
        var cmd = ('node cli.js mobile scale show ' + servicename + ' --json').split(' ');
        var scopes = setupNock(cmd);
        executeCmd(cmd, function (result) {
            result.exitStatus.should.equal(0);
            var response = JSON.parse(result.text);
            response.tier.should.equal('tier1');
            response.numberOfInstances.should.equal(1);
            checkScopes(scopes);
            done();
        });
    });

    // Preview Features

    it('preview list ' + servicename + ' --json (no features enabled)', function(done) {
      var cmd = ('node cli.js mobile preview list ' + servicename + ' --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        var response = JSON.parse(result.text);
        response.should.include({
          "enabled": [],
          "available": [ "SourceControl", "Users" ]
        });
        checkScopes(scopes);
        done();
      });
    });

    it('preview enable ' + servicename + ' sourcecontrol --json (no features enabled)', function(done) {
      var cmd = ('node cli.js mobile preview enable ' + servicename + ' sourcecontrol --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        var response = JSON.parse(result.text);
        response.featureName.should.equal("SourceControl");
        checkScopes(scopes);
        done();
      });
    });

    it('preview list ' + servicename + ' --json (no features enabled)', function(done) {
      var cmd = ('node cli.js mobile preview list ' + servicename + ' --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        var response = JSON.parse(result.text);
        response.should.include({
          "enabled": [ "SourceControl" ],
          "available": [ "SourceControl", "Users" ]
        });
        checkScopes(scopes);
        done();
      });
    });

    // Source control tests for shared scripts

    it('script upload ' + servicename + ' shared/test -f ' + __dirname + '/mobile/table1.delete.js --json (upload one script)', function (done) {
        var cmd = ('node cli.js mobile script upload ' + servicename + ' shared/test -f').split(' ');
        cmd.push(__dirname + '/mobile/table1.delete.js');
        cmd.push('--json');

        var scopes = setupNock(cmd);
        executeCmd(cmd, function (result) {
            result.errorText.should.equal('');
            result.exitStatus.should.equal(0);
            result.text.should.equal('');
            checkScopes(scopes);
            done();
        });
    });

    it('script upload ' + servicename + ' shared/test -f ' + __dirname + '/mobile/table1.delete.js --json (change one script)', function (done) {
        var cmd = ('node cli.js mobile script upload ' + servicename + ' shared/test -f').split(' ');
        cmd.push(__dirname + '/mobile/table1.read.js');
        cmd.push('--json');

        var scopes = setupNock(cmd);
        executeCmd(cmd, function (result) {
            result.errorText.should.equal('');
            result.exitStatus.should.equal(0);
            result.text.should.equal('');
            checkScopes(scopes);
            done();
        });
    });

    it('script delete ' + servicename + ' shared/test --json (delete one script)', function (done) {
        var cmd = ('node cli.js mobile script delete ' + servicename + ' shared/test').split(' ');
        cmd.push('--json');

        var scopes = setupNock(cmd);
        executeCmd(cmd, function (result) {
            result.errorText.should.equal('');
            result.exitStatus.should.equal(0);
            result.text.should.equal('');
            checkScopes(scopes);
            done();
        });
    });

    // delete mobile services

    it('delete ' + existingServiceName + ' -d -q --json (delete service without DB)', function (done) {
        var cmd = ('node cli.js mobile delete ' + existingServiceName + ' -d -q --json').split(' ');
        var scopes = setupNock(cmd);
        executeCmd(cmd, function (result) {
            result.text.should.equal('');
            result.exitStatus.should.equal(0);
            checkScopes(scopes);
            done();
        });
    });

    it('list --json (Only leave the service with new DB and server)', function (done) {
        var cmd = ('node cli.js mobile list --json').split(' ');
        var scopes = setupNock(cmd);
        executeCmd(cmd, function (result) {
            result.exitStatus.should.equal(0);
            var response = JSON.parse(result.text);
            response.some(function (service) {
                return service.name === existingServiceName;
            }).should.not.be.ok;
            checkScopes(scopes);
            done();
        });
    });

    it('show ' + servicename + ' --json (verify the existing DB and server exist or not )', function (done) {
        var cmd = ('node cli.js mobile show ' + servicename + ' --json').split(' ');
        var scopes = setupNock(cmd);
        executeCmd(cmd, function (result) {
            result.exitStatus.should.equal(0);
            var response = JSON.parse(result.text);
            Array.isArray(response.application.InternalResources.InternalResource).should.be.ok;
            response.application.InternalResources.InternalResource.length.should.equal(3);
            response.application.InternalResources.InternalResource[1].Name.should.equal(existingDBName);
            response.application.InternalResources.InternalResource[2].Name.should.equal(existingServerName);
            checkScopes(scopes);
            done();
        });
    });

    it('delete ' + servicename + ' -a -q --json (delete existing service)', function(done) {
      var cmd = ('node cli.js mobile delete ' + servicename + ' -a -q --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.text.should.equal('');
        result.exitStatus.should.equal(0);
        checkScopes(scopes);
        done();
      });
    });

    it('list --json (no services exist)', function(done) {
      var cmd = ('node cli.js mobile list --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(0);
        if (result.text !== '') {
          var response = JSON.parse(result.text);
          response.some(function (service) {
            return service.name === servicename;
          }).should.not.be.ok;
        }
        checkScopes(scopes);
        done();
      });
    });

    it('delete ' + servicename + ' -a -q --json (delete nonexisting service)', function(done) {
      var cmd = ('node cli.js mobile delete ' + servicename + ' -a -q --json').split(' ');
      var scopes = setupNock(cmd);
      executeCmd(cmd, function (result) {
        result.exitStatus.should.equal(1);
        result.errorText.should.include('The application name was not found');
        checkScopes(scopes);
        done();
      });
    });
  });
});